				                                                        -------- S T A R T ---------

Overview -
```````````
DEVELOPER==> GITHUB ==> JENKINS ==> DOCKER-HUB ==> ANSIBLE ==> DOCKER-HOST (Container = Web-Server)
|             |             |         |               |             |__ Docker Hosty pulls the image from docker hub and create container from it and runs the Webpage.
|             |             |         |               |
|             |             |         |               |__ Builds 3 docker image from Dockerfile and uploads it to Docker Hub and runs the playbook.
|             |             |         |               
|             |             |         |__ Used to store docker images
|             |             |
|             |             |__ Runs the Job that transferes Dockerfile from Jenkins-server to Ansible-server
|             |         
|             |__ Used to store Dockerfile.
|
|__ Developers changes the Link of there updated-website in Dockerfile on Github/Remote.

|__ Use this site to download free css templates: https://www.free-css.com/free-css-templates
_______________________________________________________________________________________________________________________________________________________________________


Step-1]	Create 3-AWS EC2 Linux instances
		1> Jenkins
		2> Ansible
		3> Docker-Host


Step-2]	Connect to these instance.  [ using public-IP via putty and set'Connection as 10'] (optional)
 

Step-3] Install required packages on each server and Configure servers -


	Jenkins Server
	``````````````
  > Take sudo permission (sudo su) and go to root directory (cd )
	> Install Java                            :      yum install java* -y
	> Install Jenkins                         :      install jenkins using google
	> start and enable jenkins	              :	     systemctl start jenkins	, 	systemctl enable jenkins
	> Install git                             :      yum install git -y
  
  Configure-
	> Set root login		  :	passwd root
	> Edit sshd_config		:	vim /etc/ssh/sshd_config  [ uncomment (PermitRootLogin) and (PasswordAuthentication  Yes), comment out (PasswordAuthentication  No) ]
	> restart sshd			  :	systemctl restart sshd


	Ansible Server
	``````````````
  > Take sudo permission (sudo su) and go to root directory (cd )
	> Install Ansible          : amazon-linux-extras install ansible2
	> Install Docker           : yum install docker -y
	> start and enable docker	 :	systemctl start docker ,	systemctl enable docker
  
  Configure-
	> Set root login		   :	passwd root
	> Edit sshd_config		 :	vim /etc/ssh/sshd_config  [ uncomment (PermitRootLogin) and (PasswordAuthentication  Yes), comment out (PasswordAuthentication  No) ]
	> add hosts [web]		   :	vim /etc/ansible/hosts
  > Enable Docker login  :  docker login
	> restart sshd			   :  systemctl restart sshd
	


	Docker-Host Server
	``````````````````
  > Take sudo permission (sudo su) and go to root directory (cd )
	> Install Dokcer          : yum install docker -y
	> start and enable docker	:	systemctl start docker			systemctl enable docker
  
  Configure-
	> Set root login		      :	passwd root
	> Edit sshd_config		    :	vim /etc/ssh/sshd_config  [ uncomment (PermitRootLogin) and (PasswordAuthentication  Yes), comment out (PasswordAuthentication  No) ]
	> restart sshd			      :	systemctl restart sshd






Step-4]	Setup password less communication between [Jenkins, Ansible, Docker-Host ]


	> Generate Key in SrcServer           : ssh-keygen
	> Enter  Enter  Enter
	> Copy Key to Docker-Host server      : ssh-copy-id -i root@privateIPofDestServer
	                                        yes
	                                        Enter Root Login Password of DestServer

	Note: Generate Keys on Jenkins and Ansible Server
        Copy key from 'SrcServer to DestServer' => (Jenkins to Ansible) and (Ansible to Docker-Host)


Step-5] Setup Jenkins Server
	> Manage Jenkins > Manage Plugins > Available  > Search: publish over ssh  > install without restart   > restart when installed   > give username and password
	
	> After Login > Manage Jenkins > Configure system
	> Scroll down to bottom till SSH Server
	>   [Add]
			> Name = Jenkins
			> Hostname = Private-IP-Jenkins
			> USername = root
			> Advanced  > [√] Use Password
					  Passphrase/ Password   :  root login password of Jenkins-server
					  Scroll down > [Test Connection]   [Must be Success]

      [Add]
			> Name = Ansible
			> Hostname = Private-IP-Ansible
			> USername = root
			> Advanced  > [√] Use Password
					  Passphrase/ Password   :  root login password of Ansible-server
					  Scroll down > [Test Connection]   [Must be Success]
       [Apply] & [Save]
	
  > Goto Jenkins Dashboard-
	> Create Job = my-job  [Freestyle Project]
	> Source Code Management = git
	> Build Triggers = GitHub hook trigger for GITScm polling
	
	> [Build Step] - [Add Build Steps]- [Send files or execute command over ssh]

			> Name = Jenkins
			> Exec Command = rsync -avh  /var/lib/jenkins/workspace/my-job/Dockerfile  root@privateIPofAnsible:/opt

			> Name = Ansible
			> Exec Command =	cd /opt
						docker image build -t $JOB_NAME:v1.$BUILD_ID .
						docker image tag $JOB_NAME:v1.$BUILD_ID  dockerHubUsername/$JOB_NAME:v1.$BUILD_ID
						docker image tag $JOB_NAME:v1.$BUILD_ID  dockerHubUsername/$JOB_NAME:latest
						docker image push dockerHubUsername/$JOB_NAME:v1.$BUILD_ID
						docker image push dockerHubUsername/$JOB_NAME:latest
						docker image rmi $JOB_NAME:v1.$BUILD_ID  dockerHubUsername/$JOB_NAME:v1.$BUILD_ID  dockerHubUsername/$JOB_NAME:latest
		

Step-6] Create playbook on ansible-server

	> Create Directory			:	mkdir /sourcecode
	> create playbook			  :	vim /sourcecode/docker.yml  [Use code of playbook.yml upload on this Repository]
  
  
  
Step-7] Add Hosts on Ansible Server
 
    > Open hosts file in Ansible          :   vim /etc/ansible/hosts
                                              - Add below lines in hosts file-
                                                                              [dockerhosts]
                                                                               Enter-Private-IP-of-DockerHost
                                               Save and Exit
                                               
Step-8] Do changes on Dockerfile in Github. It will run the Job on Jenkins automatically and you can see the jenkins on webpage running inside container.
        To access the webpage use [ publicIPofDockerHostServer:9000 ] on your web browser.
							           
                                                                -------- E N D ---------
